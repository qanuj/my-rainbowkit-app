import { ConnectButton } from '@rainbow-me/rainbowkit';
import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { useEffect, useState } from 'react';

import { createPublicClient, http, formatEther } from 'viem'
import { avalanche } from 'viem/chains'
import { wagmiAbi } from '../abi/token';
import { useAccount } from 'wagmi';

const Home: NextPage = () => {

  const [balance, setBalance] = useState<number>();
  const { address, chainId, isConnected } = useAccount();
  const [formattedBalance, setFormattedBalance] = useState<string>();

  useEffect(() => {
    const client = createPublicClient({
      chain: avalanche,
      transport: http(),
    });

    const fetchBalance = async () => {
      try {
        const bal = await client.readContract({
          address: '0x8125713bd45f8b5E807d9899Afaa214D5e96453C', // Replace with your contract address
          abi: wagmiAbi,
          functionName: 'balanceOf',
          args: [address], // Replace with the address you want to check
        })
        
        console.log('Balance:', bal);
        if (!bal) {
          // Handle case where balance is null or undefined
        } else {
          setBalance(bal as number);
          setFormattedBalance(formatEther(bal as bigint));
        }
      } catch (error) {
        console.error('Error fetching balance:', error);
      }
    };

    if(address && isConnected) {
      fetchBalance();
    }
    if(!isConnected) {
      setBalance(undefined);
      setFormattedBalance(undefined);
    }

  }, [isConnected, address, chainId]);

  return (
    <div className={styles.container}>
      <Head>
        <title>RainbowKit App</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main className={styles.main}>
        <ConnectButton />
        {isConnected && balance && balance > 0 && (
          <h2>Welcome to Dashboard</h2>
        )}
        {isConnected && balance && (
          <h2>
            Your Balance: {formattedBalance} Token
          </h2>
        )}
        {!isConnected && <h2>Please connect your wallet</h2>}

        {isConnected && !balance && (
          <h2>
            Access Denied. You need at least 1 token to proceed.
          </h2>
        )}

      </main>

      <footer className={styles.footer}>

      </footer>
    </div>
  );
};

export default Home;
